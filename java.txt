# disassemble bytecode
Only admits .class files ... so you must first compile your code:

	$ javac OtherClass.java

and the check the bytecode...

	$ javap -c -v java.util.LinkedList
	$ javap -c -v OtherClass

# Remote debugging
SERVER
	java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=127.0.0.1:8000 OurApplication
	java -agentlib:jdwp=transport=dt_shmem,server=y,suspend=n,address=127.0.0.1:8000 OurApplication

CLIENT
	CMD
		jdb -attach 127.0.0.1:8000

	vscode
    {
      "type": "java",
      "name": "Debug OurApplication",
      "request": "attach",
      "hostName": "localhost",
      "port": 8000
    }
   
USE CASES
	FLUME >> conf\flume-env.ps1
		 $JAVA_OPTS="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=127.0.0.1:8000"
	From the documentation 'One use case for using flume-env.sh would be to specify debugging or profiling options via JAVA_OPTS'.
	Reading the flume-ng.ps1 it seems that it reads from this envar and then appends the main application
	accordingly.
	So the next step is create a launch.json and run the vscode, after that the source files should
	detect the break points.
	It seems too that vscode in some way is communicating with the server via jdb and each time one's
	sets a break point it will tell via jdb 'stop at x'...

	VSCODE
    {
      "type": "java",
      "name": "Debug Flume",
      "request": "attach",
      "port": 8000,
      "hostName": "localhost"
    }



	Refs
	https://cwiki.apache.org/confluence/display/FLUME/Getting+Started#GettingStarted-BuildingFromSource
	https://www.baeldung.com/java-application-remote-debugging

	
	